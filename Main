package hw9;
import java.util.Random;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		//Merge sort
		//Create array
		//Split array into 2 pieces by finding midpoint\
		//put array back together in same way without temp array
		
		int lowValue;
		int highValue;
		int[] x = largeArray();
		int a;
		
		lowValue = 0;
		highValue = x.length - 1;
		
		System.out.println(lowValue + " " + highValue);
		Partition(x, lowValue, highValue);
		for(int i = 0; i < x.length; i++) {
			System.out.print(x[i] + " ");
		}
		
	}
	
	public static int[] largeArray() {
		Random random = new Random();
		Scanner scan = new Scanner(System.in);
		
		int n = 100000; 
		int x = 0;
		int p = 0;
		int c = 1;
		boolean numfound = false;
		
		int[] randomArray1 = new int[n];
		
		while(x < n - 1) {
			numfound = false;
			p = random.nextInt(10000000);
			for(int i = 0; i < n; i++) {
				if(randomArray1[i] == p) {
					numfound = true;
					break;
				}
				
			}
			if(!numfound) {
				randomArray1[x] = p;
				x++;
			}
		}
		
		return(randomArray1);
	}
	
	public static void Partition(int[] x, int lv, int hv) {
		int md;
		if(hv > lv) {
			md = (hv + lv) / 2;
			Partition (x, lv, md);
			Partition(x, md + 1, hv);
			Combine(x, lv, md, hv);
		}
	}
	
	public static void Combine(int[] x, int lv, int md, int hv) {
		int i = lv;
		int j = md + 1;
		
		while(i <= md && j <= hv) {
			if(x[i] <= x[j]) {
				i++;
			}else {
				int temp = x[j];
				int k = j;
				
				while(k > i) {
					x[k] = x[k-1];
					k--;
				}
				x[i] = temp;
				
				i++;
				md++;
				j++;
			}
		}
		
		}
	}


